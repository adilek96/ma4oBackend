// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(cuid())
  telegramId    BigInt  @unique
  username      String? @unique
  firstName     String
  lastName      String?
  email         String? @unique
  isNew         Boolean @default(true)
  isPreferences Boolean @default(false)

  // Профиль пользователя
  profile Profile?

  // Предпочтения для поиска
  preferences Preferences?

  // Фотографии
  photos Photo[]

  // Матчи
  sentMatches     Match[] @relation("UserSentMatches")
  receivedMatches Match[] @relation("UserReceivedMatches")

  // Лайки
  sentLikes     Like[] @relation("UserSentLikes")
  receivedLikes Like[] @relation("UserReceivedLikes")

  // Пропуски
  sentSkips     Skip[] @relation("UserSentSkips")
  receivedSkips Skip[] @relation("UserReceivedSkips")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Profile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Основная информация
  gender    Gender
  birthDate DateTime
  age       Int
  languages String[]

  // Местоположение
  country   String
  city      String
  latitude  Float?
  longitude Float?

  // О себе
  bio       String?  @db.Text
  interests String[] // Массив интересов

  // Дополнительная информация
  education  String?
  occupation String?
  height     Int? // в см
  smoking    Smoking?
  drinking   Drinking?

  // Настройки профиля
  isActive   Boolean @default(true)
  isVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Preferences {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Предпочтения по полу
  genderPreference GenderPreference

  // Предпочтения по возрасту
  minAge Int
  maxAge Int

  // Географические предпочтения
  locationPreference LocationPreference
  maxDistance        Int? // в км, null = не важно

  // Дополнительные фильтры
  datingGoalPreference DatingGoal[]
  smokingPreference    SmokingPreference?
  drinkingPreference   DrinkingPreference?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("preferences")
}

model Photo {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  url       String
  filename  String
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("photos")
}

model Match {
  id      String @id @default(cuid())
  userAId String
  userA   User   @relation("UserSentMatches", fields: [userAId], references: [id], onDelete: Cascade)
  userBId String
  userB   User   @relation("UserReceivedMatches", fields: [userBId], references: [id], onDelete: Cascade)

  isMutual Boolean @default(false)
  chatUrl  String? // Ссылка на чат в Telegram

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userAId, userBId])
  @@map("matches")
}

model Like {
  id         String @id @default(cuid())
  senderId   String
  sender     User   @relation("UserSentLikes", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User   @relation("UserReceivedLikes", fields: [receiverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([senderId, receiverId])
  @@map("likes")
}

model Skip {
  id         String @id @default(cuid())
  senderId   String
  sender     User   @relation("UserSentSkips", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User   @relation("UserReceivedSkips", fields: [receiverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([senderId, receiverId])
  @@map("skips")
}

// Enums
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum GenderPreference {
  MALE
  FEMALE
  ANY
  OTHER
}

enum DatingGoal {
  RELATIONSHIP
  FRIENDSHIP
  CASUAL
  MARRIAGE
  NETWORKING
}

enum LocationPreference {
  SAME_CITY
  SAME_COUNTRY
  ANYWHERE
  NEARBY
}

enum Smoking {
  NEVER
  OCCASIONALLY
  REGULARLY
  QUIT
  PREFER_NOT_TO_SAY
}

enum Drinking {
  NEVER
  OCCASIONALLY
  REGULARLY
  QUIT
  PREFER_NOT_TO_SAY
}

enum SmokingPreference {
  ACCEPTABLE
  UNACCEPTABLE
  NEUTRAL
}

enum DrinkingPreference {
  ACCEPTABLE
  UNACCEPTABLE
  NEUTRAL
}
